substitutions:
  name: epever-test
  tx_pin: GPIO4
  rx_pin: GPIO5

esphome:
  name: ${name}
  min_version: 2024.6.0

esp8266:
  board: d1_mini

logger:

api:
  reboot_timeout: 0s

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers: "de.pool.ntp.org"

uart:
  id: uart_0
  tx_pin: ${tx_pin}
  rx_pin: ${rx_pin}
  baud_rate: 115200
  stop_bits: 1

modbus:
  send_wait_time: 200ms
  uart_id: uart_0
  id: modbus0

modbus_controller:
  - id: epever
    address: 0x1
    modbus_id: modbus0
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 2s

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Charging Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 12
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 12);
      switch (value) {
        case 0: return std::string("Off");
        case 1: return std::string("Float");
        case 2: return std::string("Boost");
        case 3: return std::string("Equalization");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Operation Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 2);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Fault");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 1
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 1);
      switch (value) {
        case 0: return std::string("Running");
        case 1: return std::string("Standby");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);
