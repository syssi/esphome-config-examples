# https://esphome.io/cookbook/tracer-an.html
# https://github.com/syssi/esphome-soyosource-gtn-virtual-meter/issues/48#issuecomment-1462239914

esphome:
  name: epever-4210an
  friendly_name: "Epever"
  platformio_options:
    ## larger stack size required with all registers enable_load_test
    ## reduce registers or wait for integration of 2.0.0 arduinoespressif32
    ## not yet working needs 2.0
    build_flags:
      - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: latest

logger:

api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: !secret ap_wifi_ssid
    password: !secret ap_wifi_password

captive_portal:

web_server:

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"
    servers: "de.pool.ntp.org"

uart:
  id: uart0
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200
  stop_bits: 1

modbus:
  send_wait_time: 200ms
  uart_id: uart0
  id: modbus0

modbus_controller:
  - id: epever
    address: 0x1
    modbus_id: modbus0
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 30s

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_input_volt_failure
    name: "Charging Input Volt Failure"
    register_type: read
    address: 0x3201
    bitmask: 0xC000

sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: max_battery_voltage_today
    name: "Maximum battery voltage today"
    address: 0x3302
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: min_battery_today
    name: "Minimum battery voltage today"
    address: 0x3303
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: consumed_energy_today
    name: "Consumed energy today"
    address: 0x3304
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 0
    unit_of_measurement: "Wh"
    filters:
      - multiply: 10.0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: generated_energy_today
    name: "Generated energy today"
    address: 0x330C
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 0
    unit_of_measurement: "Wh"
    filters:
      - multiply: 10.0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_voltage
    name: "Battery voltage"
    address: 0x331A
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    unit_of_measurement: "V"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_current
    name: "Battery current"
    address: 0x331B
    register_type: read
    value_type: S_DWORD_R
    register_count: 2
    accuracy_decimals: 2
    unit_of_measurement: "A"
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_voltage
    name: "PV array input voltage"
    address: 0x3100
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: "PV array input current"
    address: 0x3101
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: "PV array input power"
    address: 0x3102
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_voltage
    name: "Charging voltage"
    address: 0x3104
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_current
    name: "Charging current"
    address: 0x3105
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Charging_power
    name: "Charging power"
    address: 0x3106
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_voltage
    name: "Load voltage"
    address: 0x310C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_current
    name: "Load Current"
    address: 0x310D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_power
    name: "Load power"
    address: 0x310E
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_temperature
    name: "Battery temperature"
    address: 0x3110
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: device_temperature
    name: "Device temperature"
    address: 0x3111
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: power_components_temperature
    name: "Power components temperature"
    address: 0x3112
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_soc
    name: "Battery SOC"
    address: 0x311A
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: remote_battery_temperature
    name: "Remote battery temperature"
    address: 0x311B
    unit_of_measurement: °C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_volt_settings
    name: "Remote real voltage"
    address: 0x311D
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Battery_status_volt
    name: "Battery status voltage"
    address: 0x3200
    register_type: read
    value_type: U_WORD
    bitmask: 7
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Battery_status_temp
    name: "Battery status temeratur"
    address: 0x3200
    register_type: read
    value_type: U_WORD
    bitmask: 56
    accuracy_decimals: 0

  - platform: modbus_controller
    modbus_controller_id: epever
    id: Charger_status
    name: "Charger status"
    address: 0x3201
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

switch:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: force_load
    register_type: coil
    address: 6
    name: "Force Load on/off"
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: clear_energy_stats
    register_type: coil
    address: 0x14
    name: "Clear generating  electricity statistic"
    bitmask: 1

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "rtc_clock"
    id: rtc_clock
    internal: true
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES
    response_size: 6
    #                /*
    #                E20 Real time clock 9013 D7-0 Sec, D15-8 Min
    #                E21 Real time clock 9014 D7-0 Hour, D15-8 Day
    #                E22 Real time clock 9015 D7-0 Month, D15-8 Year
    #                */
    on_value:
      then:
        - lambda: |-
            ESP_LOGV("main", "decoding rtc hex encoded raw data: %s", x.c_str());
            uint8_t h=0,m=0,s=0,d=0,month_=0,y = 0 ;
            m = esphome::modbus_controller::byte_from_hex_str(x,0);
            s = esphome::modbus_controller::byte_from_hex_str(x,1);
            d = esphome::modbus_controller::byte_from_hex_str(x,2);
            h = esphome::modbus_controller::byte_from_hex_str(x,3);
            y = esphome::modbus_controller::byte_from_hex_str(x,4);
            month_ = esphome::modbus_controller::byte_from_hex_str(x,5);
            // Now check if the rtc time of the controller is ok and correct it
            time_t now = ::time(nullptr);
            struct tm *time_info = ::localtime(&now);
            int seconds = time_info->tm_sec;
            int minutes = time_info->tm_min;
            int hour = time_info->tm_hour;
            int day = time_info->tm_mday;
            int month = time_info->tm_mon + 1;
            int year = time_info->tm_year % 100;
            // correct time if needed (ignore seconds)
            if (d != day || month_ != month || y != year || h != hour || m != minutes) {
              // create the payload
              std::vector<uint16_t> rtc_data = {uint16_t((minutes << 8) | seconds), uint16_t((day << 8) | hour),
                                                uint16_t((year << 8) | month)};
              // Create a modbus command item with the time information as the payload
              esphome::modbus_controller::ModbusCommandItem set_rtc_command = esphome::modbus_controller::ModbusCommandItem::create_write_multiple_command(epever, 0x9013, 3, rtc_data);
              // Submit the command to the send queue
              epever->queue_command(set_rtc_command);
              ESP_LOGI("ModbusLambda", "EPSOLAR RTC set to %02d:%02d:%02d %02d.%02d.%04d", hour, minutes, seconds, day, month, year + 2000);
            }
            char buffer[20];
            // format time as YYYY-mm-dd hh:mm:ss
            sprintf(buffer,"%04d-%02d-%02d %02d:%02d:%02d",y+2000,month_,d,h,m,s);
            id(template_rtc).publish_state(buffer);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Charging Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 12
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 12);
      switch (value) {
        case 0: return std::string("Off");
        case 1: return std::string("Float");
        case 2: return std::string("Boost");
        case 3: return std::string("Equalization");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Solar Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 2
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 2);
      switch (value) {
        case 0: return std::string("Input");
        case 1: return std::string("Cut out");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Device Status"
    address: 0x3201
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 1
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 1);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Standby");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Battery Voltage Status"
    address: 0x3200
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 7
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 7);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Overvolt");
        case 2: return std::string("Low voltage disconnect");
        case 3: return std::string("Fault");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "Battery Temperature Status"
    address: 0x3200
    register_type: read
    # Doesn't get applied at ESPHome 2023.3.0
    # bitmask: 56
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = modbus_controller::mask_and_shift_by_rightbit(value, 56);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Overtemperature");
        case 2: return std::string("Undertemperature");
      }
      return str_snprintf("Unknown (0x%04X)", 17, value);

  - platform: template
    name: "RTC Time Sensor"
    id: template_rtc

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "rtc clock test 2"
    id: rtc_clock_test2
    internal: true
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES
    response_size: 6
